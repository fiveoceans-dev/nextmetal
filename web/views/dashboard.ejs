<%# dashboard.ejs %>

  <!DOCTYPE html>
  <html lang="en">

  <%- include('partials/head') %>

    <main class="account-page">
      <header class="dashboardbar">
        <div class="left">
          <div class="logo-metal">
            <a href="/">
              <img src="/images/nextmetal_background.svg" alt="Next Metal">
              <div class="logo">NextMetal</div>
            </a>
          </div>
          <div class="workspace">Workspace</div>
          <button class="btn">Connect</button>
        </div>
        <div class="center">

        </div>
        <div class="right">
          <div class="avatar-dropdown">
            <div class="avatar">
              <img src="/images/band.jpg" alt="avatar">
            </div>
            <div class="dropdown-menu">
              <!-- <a href="/account" class="dropdown-item">Profile</a> -->
              <a href="/auth/logout" class="dropdown-item">Logout</a>
            </div>
          </div>
        </div>
      </header>

      <div class="container">
        <!--  NAVIGATION  -->
        <nav class="iconbar">
          <a href="/dashboard" class="icon-link" title="Dashboard">
            <span class="bp5-icon bp5-icon-dashboard bp5-icon-large"></span>
            <span class="icon-label">Dashboard</span>
          </a>
          <a href="/dashboard/storage" class="icon-link" title="Storage">
            <span class="bp5-icon bp5-icon-cloud bp5-icon-large"></span>
            <span class="icon-label">Storage</span>
          </a>

          <a href="/dashboard/hosting" class="icon-link" title="Hosting">
            <span class="bp5-icon bp5-icon-server bp5-icon-large"></span>
            <span class="icon-label">Hosting</span>
          </a>

          <a href="/dashboard/database" class="icon-link" title="Database">
            <span class="bp5-icon bp5-icon-database bp5-icon-large"></span>
            <span class="icon-label">Database</span>
          </a>

          <a href="/dashboard/models" class="icon-link" title="Models">
            <span class="bp5-icon bp5-icon-layout-auto bp5-icon-large"></span>
            <span class="icon-label">Models</span>
          </a>

          <a href="/dashboard/agents" class="icon-link" title="Agents">
            <span class="bp5-icon bp5-icon-mugshot bp5-icon-large"></span>
            <span class="icon-label">Agents</span>
          </a>

          <a href="/dashboard/hosting" class="icon-link" title="Functions">
            <span class="bp5-icon bp5-icon-function bp5-icon-large"></span>
            <span class="icon-label">Functions</span>
          </a>
        </nav>

        <!-- sidebar -->
        <aside class="sidebar">
          <%- include(sidebar) %>
        </aside>
        <!-- mainwindow -->
        <div class="mainwindow">
            <div>
              <%- include(mainwindow) %>
            </div>
        </div>
      </div>
    </main>
    <script>
      const { ReactFlow, addEdge, MiniMap, Controls, Background } = window.ReactFlow;
      const { createElement, useState, useCallback } = React;

      function FlowExample() {
        const initialNodes = [
          { id: '1', position: { x: 0, y: 0 }, data: { label: 'Input' }, type: 'input' },
          { id: '2', position: { x: 200, y: 0 }, data: { label: 'Processing' } },
          { id: '3', position: { x: 400, y: 0 }, data: { label: 'Output' }, type: 'output' }
        ];
        const initialEdges = [{ id: 'e1-2', source: '1', target: '2' }, { id: 'e2-3', source: '2', target: '3' }];

        const [nodes, setNodes] = useState(initialNodes);
        const [edges, setEdges] = useState(initialEdges);

        const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);

        return createElement(ReactFlow, {
          nodes, edges, onConnect, fitView: true,
          children: [createElement(MiniMap, { key: 'minimap' }), createElement(Controls, { key: 'controls' }), createElement(Background, { key: 'bg' })]
        });
      }

      ReactDOM.createRoot(document.getElementById('flow-root')).render(createElement(FlowExample));
    </script>

    <script>
      document.querySelectorAll('.iconbar .icon-link').forEach(link => {
        link.addEventListener('click', async evt => {
          evt.preventDefault();
          const url = link.href;

          const [mainResp, sidebarResp] = await Promise.all([
            fetch(url, { headers: { 'X-PJAX': 'mainwindow' } }),
            fetch(url, { headers: { 'X-PJAX': 'sidebar' } })
          ]);

          if (!mainResp.ok || !sidebarResp.ok) return location.href = url;

          const mainHTML = await mainResp.text();
          const sidebarHTML = await sidebarResp.text();

          document.querySelector('.mainwindow').innerHTML = mainHTML;
          document.querySelector('.sidebar').innerHTML = sidebarHTML;

          history.pushState({ pjax: true }, '', url);
        });
      });

      window.addEventListener('popstate', e => {
        if (!e.state?.pjax) return location.reload();

        const url = location.pathname;

        Promise.all([
          fetch(url, { headers: { 'X-PJAX': 'mainwindow' } }),
          fetch(url, { headers: { 'X-PJAX': 'sidebar' } })
        ])
          .then(([mainResp, sidebarResp]) => Promise.all([mainResp.text(), sidebarResp.text()]))
          .then(([mainHTML, sidebarHTML]) => {
            document.querySelector('.mainwindow').innerHTML = mainHTML;
            document.querySelector('.sidebar').innerHTML = sidebarHTML;
          });
      });

    </script>

  </html>